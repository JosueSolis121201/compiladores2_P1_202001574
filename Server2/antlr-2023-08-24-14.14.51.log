2023-08-24 14:14:50:917 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'Let'))) (RULE D_APPEND (BLOCK (ALT '.append'))) (RULE D_REMOVE (BLOCK (ALT '.remove'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE STRUCT (BLOCK (ALT 'STRUCT'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE SELF_D (BLOCK (ALT 'self.'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE GUION_B (BLOCK (ALT '_'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE MAS_IGUAL (BLOCK (ALT '+='))) (RULE MENOS_IGUAL (BLOCK (ALT '-='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE SOLO_AND (BLOCK (ALT '&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO_COMA (BLOCK (ALT ';'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-24 14:14:50:933 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'Let'))) (RULE D_APPEND (BLOCK (ALT '.append'))) (RULE D_REMOVE (BLOCK (ALT '.remove'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE STRUCT (BLOCK (ALT 'STRUCT'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE SELF_D (BLOCK (ALT 'self.'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE GUION_B (BLOCK (ALT '_'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE MAS_IGUAL (BLOCK (ALT '+='))) (RULE MENOS_IGUAL (BLOCK (ALT '-='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE SOLO_AND (BLOCK (ALT '&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO_COMA (BLOCK (ALT ';'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-24 14:14:51:193 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR {}) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 14:14:51:196 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR {}) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 14:14:51:197 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR {}) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 14:14:51:197 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-24 14:14:51:210 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=337> expr<tokenIndex=339> PARDER<tokenIndex=341> { $e = $expr.e } 
        | list=listArray<tokenIndex=349> { $e = $list.p} 
        | CORIZQ<tokenIndex=355> listParams<tokenIndex=357> CORDER<tokenIndex=359> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=365>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=371>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=377> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=383> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MUL<tokenIndex=212>|DIV<tokenIndex=214>) right=expr<tokenIndex=219,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(ADD<tokenIndex=232>|SUB<tokenIndex=234>) right=expr<tokenIndex=239,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MAY_IG<tokenIndex=252>|MAYOR<tokenIndex=254>) right=expr<tokenIndex=259,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MEN_IG<tokenIndex=272>|MENOR<tokenIndex=274>) right=expr<tokenIndex=279,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(IG_IG<tokenIndex=292>|DIF<tokenIndex=294>) right=expr<tokenIndex=299,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=AND<tokenIndex=311> right=expr<tokenIndex=315,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=OR<tokenIndex=327> right=expr<tokenIndex=331,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-24 14:14:51:220 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 337))) (expr (ELEMENT_OPTIONS (= tokenIndex 339))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 341))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 349)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 355))) (listParams (ELEMENT_OPTIONS (= tokenIndex 357))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 359))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 365))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 371))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 377))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 383))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 212))) (DIV (ELEMENT_OPTIONS (= tokenIndex 214))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 219) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 232))) (SUB (ELEMENT_OPTIONS (= tokenIndex 234))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 239) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 252))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 254))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 259) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 272))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 274))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 279) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 292))) (DIF (ELEMENT_OPTIONS (= tokenIndex 294))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 299) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 311)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 315) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 327)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 331) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-24 14:14:51:220 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=408> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=400> expr<tokenIndex=402> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-24 14:14:51:222 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 408))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 400))) (expr (ELEMENT_OPTIONS (= tokenIndex 402))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-24 14:14:51:222 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=437> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=427> expr<tokenIndex=429> CORDER<tokenIndex=431> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-24 14:14:51:223 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 437))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 427))) (expr (ELEMENT_OPTIONS (= tokenIndex 429))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 431))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-24 14:14:51:228 grammar LogManager.java:25 import INT=1
2023-08-24 14:14:51:229 grammar LogManager.java:25 import FLOAT=2
2023-08-24 14:14:51:229 grammar LogManager.java:25 import BOOL=3
2023-08-24 14:14:51:229 grammar LogManager.java:25 import STR=4
2023-08-24 14:14:51:229 grammar LogManager.java:25 import CHAR=5
2023-08-24 14:14:51:229 grammar LogManager.java:25 import TRU=6
2023-08-24 14:14:51:229 grammar LogManager.java:25 import FAL=7
2023-08-24 14:14:51:229 grammar LogManager.java:25 import PRINT=8
2023-08-24 14:14:51:229 grammar LogManager.java:25 import IF=9
2023-08-24 14:14:51:229 grammar LogManager.java:25 import ELSE=10
2023-08-24 14:14:51:230 grammar LogManager.java:25 import WHILE=11
2023-08-24 14:14:51:230 grammar LogManager.java:25 import FOR=12
2023-08-24 14:14:51:230 grammar LogManager.java:25 import IN=13
2023-08-24 14:14:51:230 grammar LogManager.java:25 import GUARD=14
2023-08-24 14:14:51:230 grammar LogManager.java:25 import CONTINUE=15
2023-08-24 14:14:51:230 grammar LogManager.java:25 import RETURN=16
2023-08-24 14:14:51:230 grammar LogManager.java:25 import SWITCH=17
2023-08-24 14:14:51:230 grammar LogManager.java:25 import BREAK=18
2023-08-24 14:14:51:230 grammar LogManager.java:25 import CASE=19
2023-08-24 14:14:51:230 grammar LogManager.java:25 import VAR=20
2023-08-24 14:14:51:231 grammar LogManager.java:25 import LET=21
2023-08-24 14:14:51:231 grammar LogManager.java:25 import D_APPEND=22
2023-08-24 14:14:51:231 grammar LogManager.java:25 import D_REMOVE=23
2023-08-24 14:14:51:231 grammar LogManager.java:25 import REPEATING=24
2023-08-24 14:14:51:231 grammar LogManager.java:25 import COUNT=25
2023-08-24 14:14:51:231 grammar LogManager.java:25 import STRUCT=26
2023-08-24 14:14:51:231 grammar LogManager.java:25 import MUTATING=27
2023-08-24 14:14:51:231 grammar LogManager.java:25 import FUNC=28
2023-08-24 14:14:51:232 grammar LogManager.java:25 import SELF_D=29
2023-08-24 14:14:51:232 grammar LogManager.java:25 import PUNTO=30
2023-08-24 14:14:51:232 grammar LogManager.java:25 import INOUT=31
2023-08-24 14:14:51:232 grammar LogManager.java:25 import GUION_B=32
2023-08-24 14:14:51:232 grammar LogManager.java:25 import NUMBER=33
2023-08-24 14:14:51:232 grammar LogManager.java:25 import STRING=34
2023-08-24 14:14:51:232 grammar LogManager.java:25 import ID=35
2023-08-24 14:14:51:232 grammar LogManager.java:25 import DIF=36
2023-08-24 14:14:51:232 grammar LogManager.java:25 import IG_IG=37
2023-08-24 14:14:51:232 grammar LogManager.java:25 import MAS_IGUAL=38
2023-08-24 14:14:51:232 grammar LogManager.java:25 import MENOS_IGUAL=39
2023-08-24 14:14:51:232 grammar LogManager.java:25 import NOT=40
2023-08-24 14:14:51:232 grammar LogManager.java:25 import OR=41
2023-08-24 14:14:51:233 grammar LogManager.java:25 import AND=42
2023-08-24 14:14:51:233 grammar LogManager.java:25 import SOLO_AND=43
2023-08-24 14:14:51:233 grammar LogManager.java:25 import IG=44
2023-08-24 14:14:51:233 grammar LogManager.java:25 import MAY_IG=45
2023-08-24 14:14:51:233 grammar LogManager.java:25 import MEN_IG=46
2023-08-24 14:14:51:233 grammar LogManager.java:25 import MAYOR=47
2023-08-24 14:14:51:233 grammar LogManager.java:25 import MENOR=48
2023-08-24 14:14:51:233 grammar LogManager.java:25 import MUL=49
2023-08-24 14:14:51:233 grammar LogManager.java:25 import DIV=50
2023-08-24 14:14:51:233 grammar LogManager.java:25 import ADD=51
2023-08-24 14:14:51:233 grammar LogManager.java:25 import MODULO=52
2023-08-24 14:14:51:233 grammar LogManager.java:25 import SUB=53
2023-08-24 14:14:51:234 grammar LogManager.java:25 import PARIZQ=54
2023-08-24 14:14:51:234 grammar LogManager.java:25 import PARDER=55
2023-08-24 14:14:51:234 grammar LogManager.java:25 import LLAVEIZQ=56
2023-08-24 14:14:51:234 grammar LogManager.java:25 import LLAVEDER=57
2023-08-24 14:14:51:234 grammar LogManager.java:25 import D_PTS=58
2023-08-24 14:14:51:234 grammar LogManager.java:25 import CORIZQ=59
2023-08-24 14:14:51:234 grammar LogManager.java:25 import CORDER=60
2023-08-24 14:14:51:234 grammar LogManager.java:25 import COMA=61
2023-08-24 14:14:51:234 grammar LogManager.java:25 import PUNTO_COMA=62
2023-08-24 14:14:51:234 grammar LogManager.java:25 import WHITESPACE=63
2023-08-24 14:14:51:234 grammar LogManager.java:25 import COMMENT=64
2023-08-24 14:14:51:234 grammar LogManager.java:25 import LINE_COMMENT=65
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'Int'=1
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'Float'=2
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'Bool'=3
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'String'=4
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'Character'=5
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'true'=6
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'false'=7
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'print'=8
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'if'=9
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'else'=10
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'while'=11
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'for'=12
2023-08-24 14:14:51:235 grammar LogManager.java:25 import 'in'=13
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'guard'=14
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'continue'=15
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'return'=16
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'switch'=17
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'break'=18
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'case'=19
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'var'=20
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'Let'=21
2023-08-24 14:14:51:236 grammar LogManager.java:25 import '.append'=22
2023-08-24 14:14:51:236 grammar LogManager.java:25 import '.remove'=23
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'repeating'=24
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'count'=25
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'STRUCT'=26
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'mutating'=27
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'func'=28
2023-08-24 14:14:51:236 grammar LogManager.java:25 import 'self.'=29
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '.'=30
2023-08-24 14:14:51:237 grammar LogManager.java:25 import 'inout'=31
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '_'=32
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '!='=36
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '=='=37
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '+='=38
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '-='=39
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '!'=40
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '||'=41
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '&&'=42
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '&'=43
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '='=44
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '>='=45
2023-08-24 14:14:51:237 grammar LogManager.java:25 import '<='=46
2023-08-24 14:14:51:238 grammar LogManager.java:25 import '>'=47
2023-08-24 14:14:51:238 grammar LogManager.java:25 import '<'=48
2023-08-24 14:14:51:238 grammar LogManager.java:25 import '*'=49
2023-08-24 14:14:51:238 grammar LogManager.java:25 import '/'=50
2023-08-24 14:14:51:238 grammar LogManager.java:25 import '+'=51
2023-08-24 14:14:51:238 grammar LogManager.java:25 import '%'=52
2023-08-24 14:14:51:238 grammar LogManager.java:25 import '-'=53
2023-08-24 14:14:51:238 grammar LogManager.java:25 import '('=54
2023-08-24 14:14:51:238 grammar LogManager.java:25 import ')'=55
2023-08-24 14:14:51:238 grammar LogManager.java:25 import '{'=56
2023-08-24 14:14:51:238 grammar LogManager.java:25 import '}'=57
2023-08-24 14:14:51:238 grammar LogManager.java:25 import ':'=58
2023-08-24 14:14:51:238 grammar LogManager.java:25 import '['=59
2023-08-24 14:14:51:238 grammar LogManager.java:25 import ']'=60
2023-08-24 14:14:51:238 grammar LogManager.java:25 import ','=61
2023-08-24 14:14:51:239 grammar LogManager.java:25 import ';'=62
2023-08-24 14:14:51:239 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, TRU=6, FAL=7, PRINT=8, IF=9, ELSE=10, WHILE=11, FOR=12, IN=13, GUARD=14, CONTINUE=15, RETURN=16, SWITCH=17, BREAK=18, CASE=19, VAR=20, LET=21, D_APPEND=22, D_REMOVE=23, REPEATING=24, COUNT=25, STRUCT=26, MUTATING=27, FUNC=28, SELF_D=29, PUNTO=30, INOUT=31, GUION_B=32, NUMBER=33, STRING=34, ID=35, DIF=36, IG_IG=37, MAS_IGUAL=38, MENOS_IGUAL=39, NOT=40, OR=41, AND=42, SOLO_AND=43, IG=44, MAY_IG=45, MEN_IG=46, MAYOR=47, MENOR=48, MUL=49, DIV=50, ADD=51, MODULO=52, SUB=53, PARIZQ=54, PARDER=55, LLAVEIZQ=56, LLAVEDER=57, D_PTS=58, CORIZQ=59, CORDER=60, COMA=61, PUNTO_COMA=62, WHITESPACE=63, COMMENT=64, LINE_COMMENT=65, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'true'=6, 'false'=7, 'print'=8, 'if'=9, 'else'=10, 'while'=11, 'for'=12, 'in'=13, 'guard'=14, 'continue'=15, 'return'=16, 'switch'=17, 'break'=18, 'case'=19, 'var'=20, 'Let'=21, '.append'=22, '.remove'=23, 'repeating'=24, 'count'=25, 'STRUCT'=26, 'mutating'=27, 'func'=28, 'self.'=29, '.'=30, 'inout'=31, '_'=32, '!='=36, '=='=37, '+='=38, '-='=39, '!'=40, '||'=41, '&&'=42, '&'=43, '='=44, '>='=45, '<='=46, '>'=47, '<'=48, '*'=49, '/'=50, '+'=51, '%'=52, '-'=53, '('=54, ')'=55, '{'=56, '}'=57, ':'=58, '['=59, ']'=60, ','=61, ';'=62}
2023-08-24 14:14:51:239 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, TRU=6, FAL=7, PRINT=8, IF=9, ELSE=10, WHILE=11, FOR=12, IN=13, GUARD=14, CONTINUE=15, RETURN=16, SWITCH=17, BREAK=18, CASE=19, VAR=20, LET=21, D_APPEND=22, D_REMOVE=23, REPEATING=24, COUNT=25, STRUCT=26, MUTATING=27, FUNC=28, SELF_D=29, PUNTO=30, INOUT=31, GUION_B=32, NUMBER=33, STRING=34, ID=35, DIF=36, IG_IG=37, MAS_IGUAL=38, MENOS_IGUAL=39, NOT=40, OR=41, AND=42, SOLO_AND=43, IG=44, MAY_IG=45, MEN_IG=46, MAYOR=47, MENOR=48, MUL=49, DIV=50, ADD=51, MODULO=52, SUB=53, PARIZQ=54, PARDER=55, LLAVEIZQ=56, LLAVEDER=57, D_PTS=58, CORIZQ=59, CORDER=60, COMA=61, PUNTO_COMA=62, WHITESPACE=63, COMMENT=64, LINE_COMMENT=65}
2023-08-24 14:14:51:239 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'true'=6, 'false'=7, 'print'=8, 'if'=9, 'else'=10, 'while'=11, 'for'=12, 'in'=13, 'guard'=14, 'continue'=15, 'return'=16, 'switch'=17, 'break'=18, 'case'=19, 'var'=20, 'Let'=21, '.append'=22, '.remove'=23, 'repeating'=24, 'count'=25, 'STRUCT'=26, 'mutating'=27, 'func'=28, 'self.'=29, '.'=30, 'inout'=31, '_'=32, '!='=36, '=='=37, '+='=38, '-='=39, '!'=40, '||'=41, '&&'=42, '&'=43, '='=44, '>='=45, '<='=46, '>'=47, '<'=48, '*'=49, '/'=50, '+'=51, '%'=52, '-'=53, '('=54, ')'=55, '{'=56, '}'=57, ':'=58, '['=59, ']'=60, ','=61, ';'=62}
2023-08-24 14:14:51:254 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-24 14:14:51:254 LL1 LogManager.java:25 look=[{8..9, 20}, {<EOF>, 57}]
2023-08-24 14:14:51:254 LL1 LogManager.java:25 LL(1)? true
2023-08-24 14:14:51:254 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-24 14:14:51:254 LL1 LogManager.java:25 look=[8, 9, 20]
2023-08-24 14:14:51:254 LL1 LogManager.java:25 LL(1)? true
2023-08-24 14:14:51:255 LL1 LogManager.java:25 
DECISION 2 in rule types
2023-08-24 14:14:51:255 LL1 LogManager.java:25 look=[1, 2, 4, 3, 5, 59]
2023-08-24 14:14:51:255 LL1 LogManager.java:25 LL(1)? true
2023-08-24 14:14:51:255 LL1 LogManager.java:25 
DECISION 3 in rule expr
2023-08-24 14:14:51:255 LL1 LogManager.java:25 look=[54, 35, 59, 33, 34, 6, 7]
2023-08-24 14:14:51:255 LL1 LogManager.java:25 LL(1)? true
2023-08-24 14:14:51:255 LL1 LogManager.java:25 
DECISION 4 in rule expr
2023-08-24 14:14:51:255 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-24 14:14:51:255 LL1 LogManager.java:25 LL(1)? false
2023-08-24 14:14:51:255 LL1 LogManager.java:25 
DECISION 5 in rule expr
2023-08-24 14:14:51:255 LL1 LogManager.java:25 look=[null, null]
2023-08-24 14:14:51:255 LL1 LogManager.java:25 LL(1)? false
2023-08-24 14:14:51:255 LL1 LogManager.java:25 
DECISION 6 in rule listParams
2023-08-24 14:14:51:255 LL1 LogManager.java:25 look=[null, 60]
2023-08-24 14:14:51:255 LL1 LogManager.java:25 LL(1)? false
2023-08-24 14:14:51:255 LL1 LogManager.java:25 
DECISION 7 in rule listArray
2023-08-24 14:14:51:256 LL1 LogManager.java:25 look=[null, null]
2023-08-24 14:14:51:256 LL1 LogManager.java:25 LL(1)? false
2023-08-24 14:14:51:259 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:14:51:271 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-24 14:14:51:271 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-08-24 14:14:51:272 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-08-24 14:14:51:273 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-24 14:14:51:273 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-08-24 14:14:51:275 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-24 14:14:51:275 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-08-24 14:14:51:275 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-08-24 14:14:51:275 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-24 14:14:51:275 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-24 14:14:51:275 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-24 14:14:51:276 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-24 14:14:51:276 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-08-24 14:14:51:276 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-08-24 14:14:51:276 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-24 14:14:51:276 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-08-24 14:14:51:276 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-08-24 14:14:51:278 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-24 14:14:51:278 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,45:29]
2023-08-24 14:14:51:278 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,45:59].[@-1,38:41='line',<0>,45:65]
2023-08-24 14:14:51:278 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,45:71].[@-1,50:52='pos',<0>,45:77]
2023-08-24 14:14:51:278 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,45:82].[@-1,60:60='e',<0>,45:87]
2023-08-24 14:14:51:279 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk) 
2023-08-24 14:14:51:279 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,49:36]
2023-08-24 14:14:51:279 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,49:65].[@-1,34:37='line',<0>,49:68]
2023-08-24 14:14:51:280 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,49:75].[@-1,44:46='pos',<0>,49:78]
2023-08-24 14:14:51:280 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,49:84].[@-1,55:55='e',<0>,49:89]
2023-08-24 14:14:51:280 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,49:93].[@-1,65:67='blk',<0>,49:99]
2023-08-24 14:14:51:281 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) 
2023-08-24 14:14:51:281 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,53:32]
2023-08-24 14:14:51:281 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,53:67].[@-1,41:44='line',<0>,53:71]
2023-08-24 14:14:51:281 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,53:78].[@-1,52:54='pos',<0>,53:82]
2023-08-24 14:14:51:281 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,53:88].[@-1,61:64='text',<0>,53:91]
2023-08-24 14:14:51:281 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,53:98].[@-1,74:75='ty',<0>,53:104]
2023-08-24 14:14:51:281 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,53:109].[@-1,84:84='e',<0>,53:114]
2023-08-24 14:14:51:282 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-24 14:14:51:282 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,57:8]
2023-08-24 14:14:51:282 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-24 14:14:51:283 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,58:10]
2023-08-24 14:14:51:283 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-24 14:14:51:283 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,59:8]
2023-08-24 14:14:51:283 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-24 14:14:51:283 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,60:9]
2023-08-24 14:14:51:284 action-translator LogManager.java:25 translate 
2023-08-24 14:14:51:284 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-24 14:14:51:284 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,62:18]
2023-08-24 14:14:51:285 action-translator LogManager.java:25 translate 
2023-08-24 14:14:51:286 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-24 14:14:51:286 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-24 14:14:51:286 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-24 14:14:51:286 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-24 14:14:51:286 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-08-24 14:14:51:286 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-08-24 14:14:51:286 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-24 14:14:51:286 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:85]
2023-08-24 14:14:51:287 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,4:111].[@-1,35:38='line',<0>,4:118]
2023-08-24 14:14:51:287 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,4:125].[@-1,49:51='pos',<0>,4:132]
2023-08-24 14:14:51:287 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,4:138].[@-1,66:66='l',<0>,4:149]
2023-08-24 14:14:51:287 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-24 14:14:51:287 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-24 14:14:51:287 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-24 14:14:51:287 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-24 14:14:51:287 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-24 14:14:51:287 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-24 14:14:51:288 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-24 14:14:51:288 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-24 14:14:51:288 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-24 14:14:51:288 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-24 14:14:51:288 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-24 14:14:51:288 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-24 14:14:51:288 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-24 14:14:51:289 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-24 14:14:51:289 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-24 14:14:51:289 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-24 14:14:51:289 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:32]
2023-08-24 14:14:51:290 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,26:62].[@-1,36:39='line',<0>,26:66]
2023-08-24 14:14:51:290 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,26:73].[@-1,47:49='pos',<0>,26:77]
2023-08-24 14:14:51:290 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-24 14:14:51:290 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:32]
2023-08-24 14:14:51:290 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,27:62].[@-1,36:39='line',<0>,27:66]
2023-08-24 14:14:51:290 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,27:73].[@-1,47:49='pos',<0>,27:77]
2023-08-24 14:14:51:291 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-24 14:14:51:292 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:14:51:292 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:139]
2023-08-24 14:14:51:292 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:169].[@-1,37:41='start',<0>,30:174]
2023-08-24 14:14:51:292 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:192].[@-1,60:64='start',<0>,30:197]
2023-08-24 14:14:51:292 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:217].[@-1,85:85='e',<0>,30:222]
2023-08-24 14:14:51:292 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:226].[@-1,92:95='text',<0>,30:229]
2023-08-24 14:14:51:292 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:236].[@-1,105:105='e',<0>,30:242]
2023-08-24 14:14:51:292 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-24 14:14:51:292 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:14:51:293 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:149]
2023-08-24 14:14:51:293 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:179].[@-1,37:41='start',<0>,31:184]
2023-08-24 14:14:51:293 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:202].[@-1,60:64='start',<0>,31:207]
2023-08-24 14:14:51:293 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:227].[@-1,85:85='e',<0>,31:232]
2023-08-24 14:14:51:293 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:236].[@-1,92:95='text',<0>,31:239]
2023-08-24 14:14:51:293 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:246].[@-1,105:105='e',<0>,31:252]
2023-08-24 14:14:51:293 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-24 14:14:51:293 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:14:51:293 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:154]
2023-08-24 14:14:51:294 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:184].[@-1,37:41='start',<0>,32:189]
2023-08-24 14:14:51:294 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:207].[@-1,60:64='start',<0>,32:212]
2023-08-24 14:14:51:294 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:232].[@-1,85:85='e',<0>,32:237]
2023-08-24 14:14:51:294 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:241].[@-1,92:95='text',<0>,32:244]
2023-08-24 14:14:51:294 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:251].[@-1,105:105='e',<0>,32:257]
2023-08-24 14:14:51:294 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-24 14:14:51:294 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:14:51:294 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:154]
2023-08-24 14:14:51:294 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:184].[@-1,37:41='start',<0>,33:189]
2023-08-24 14:14:51:295 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:207].[@-1,60:64='start',<0>,33:212]
2023-08-24 14:14:51:295 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:232].[@-1,85:85='e',<0>,33:237]
2023-08-24 14:14:51:295 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:241].[@-1,92:95='text',<0>,33:244]
2023-08-24 14:14:51:295 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:251].[@-1,105:105='e',<0>,33:257]
2023-08-24 14:14:51:295 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-24 14:14:51:295 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:14:51:295 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:151]
2023-08-24 14:14:51:295 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:181].[@-1,37:41='start',<0>,34:186]
2023-08-24 14:14:51:296 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:204].[@-1,60:64='start',<0>,34:209]
2023-08-24 14:14:51:296 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:229].[@-1,85:85='e',<0>,34:234]
2023-08-24 14:14:51:296 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:238].[@-1,92:95='text',<0>,34:241]
2023-08-24 14:14:51:296 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:248].[@-1,105:105='e',<0>,34:254]
2023-08-24 14:14:51:296 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-24 14:14:51:297 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:14:51:297 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:125]
2023-08-24 14:14:51:297 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:155].[@-1,37:41='start',<0>,35:160]
2023-08-24 14:14:51:297 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:178].[@-1,60:64='start',<0>,35:183]
2023-08-24 14:14:51:297 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:203].[@-1,85:85='e',<0>,35:208]
2023-08-24 14:14:51:297 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:212].[@-1,92:95='text',<0>,35:215]
2023-08-24 14:14:51:297 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:222].[@-1,105:105='e',<0>,35:228]
2023-08-24 14:14:51:297 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-24 14:14:51:297 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:14:51:297 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:123]
2023-08-24 14:14:51:297 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:153].[@-1,37:41='start',<0>,36:158]
2023-08-24 14:14:51:297 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:176].[@-1,60:64='start',<0>,36:181]
2023-08-24 14:14:51:298 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:201].[@-1,85:85='e',<0>,36:206]
2023-08-24 14:14:51:298 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:210].[@-1,92:95='text',<0>,36:213]
2023-08-24 14:14:51:298 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:220].[@-1,105:105='e',<0>,36:226]
2023-08-24 14:14:51:299 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-24 14:14:51:299 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-24 14:14:51:299 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-24 14:14:51:299 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-24 14:14:51:299 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-24 14:14:51:299 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-24 14:14:51:299 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-24 14:14:51:300 action-translator LogManager.java:25 translate 
2023-08-24 14:14:51:300 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-24 14:14:51:300 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-24 14:14:51:300 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-24 14:14:51:300 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-24 14:14:51:300 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-24 14:14:51:300 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 14:14:51:301 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-24 14:14:51:301 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-24 14:14:51:301 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-24 14:14:51:301 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-24 14:14:51:301 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 14:14:51:301 action-translator LogManager.java:25 translate 
2023-08-24 14:14:51:301 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-24 14:14:51:301 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-24 14:14:51:301 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-24 14:14:51:301 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-24 14:14:51:302 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-24 14:14:51:302 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 14:14:51:302 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-24 14:14:51:302 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-08-24 14:14:51:302 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-08-24 14:14:51:302 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-08-24 14:14:51:302 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-08-24 14:14:51:302 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-08-24 14:14:51:303 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 14:14:51:405 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:14:51:405 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:14:51:446 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:14:51:446 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:14:51:487 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:14:51:487 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:14:51:548 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:14:51:549 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

