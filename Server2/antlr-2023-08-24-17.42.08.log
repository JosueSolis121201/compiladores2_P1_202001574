2023-08-24 17:42:07:813 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE ELSE_IF (BLOCK (ALT 'else if'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE D_APPEND (BLOCK (ALT '.append'))) (RULE D_REMOVE (BLOCK (ALT '.remove'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE STRUCT (BLOCK (ALT 'STRUCT'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE SELF_D (BLOCK (ALT 'self.'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE GUION_B (BLOCK (ALT '_'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE MAS_IGUAL (BLOCK (ALT '+='))) (RULE MENOS_IGUAL (BLOCK (ALT '-='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE SOLO_AND (BLOCK (ALT '&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO_COMA (BLOCK (ALT ';'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-24 17:42:07:828 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE ELSE_IF (BLOCK (ALT 'else if'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE D_APPEND (BLOCK (ALT '.append'))) (RULE D_REMOVE (BLOCK (ALT '.remove'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE STRUCT (BLOCK (ALT 'STRUCT'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE SELF_D (BLOCK (ALT 'self.'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE GUION_B (BLOCK (ALT '_'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE MAS_IGUAL (BLOCK (ALT '+='))) (RULE MENOS_IGUAL (BLOCK (ALT '-='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE SOLO_AND (BLOCK (ALT '&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO_COMA (BLOCK (ALT ';'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-24 17:42:08:083 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacionstmt {}) (ALT switchstmt {}) (ALT whilestmt {}))) (RULE whilestmt (returns ) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER else_ifstmt elsestmt {}))) (RULE elsestmt (returns ) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER {}) (ALT EPSILON))) (RULE else_ifstmt (returns ) (BLOCK (ALT else_ifstmt ELSE_IF expr LLAVEIZQ block LLAVEDER {}) (ALT EPSILON))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT reserv ID D_PTS types IG expr {}) (ALT reserv ID IG expr {}))) (RULE switchstmt (returns ) (BLOCK (ALT SWITCH expr LLAVEIZQ case defaultsts LLAVEDER {}))) (RULE defaultsts (returns ) (BLOCK (ALT DEFAULT D_PTS block {}) (ALT EPSILON))) (RULE case (returns ) (BLOCK (ALT case CASE expr D_PTS block {}) (ALT EPSILON))) (RULE asignacionstmt (returns ) (BLOCK (ALT ID ig_type expr {}))) (RULE ig_type (returns ) (BLOCK (ALT IG {}) (ALT IG_IG {}) (ALT MAS_IGUAL {}) (ALT MENOS_IGUAL {}))) (RULE reserv (returns ) (BLOCK (ALT VAR {}) (ALT LET {}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR {}) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op MAS_IGUAL) (= right expr) {}) (ALT (= left expr) (= op MENOS_IGUAL) (= right expr) {}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 17:42:08:088 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacionstmt {}) (ALT switchstmt {}) (ALT whilestmt {}))) (RULE whilestmt (returns ) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER else_ifstmt elsestmt {}))) (RULE elsestmt (returns ) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER {}) (ALT EPSILON))) (RULE else_ifstmt (returns ) (BLOCK (ALT else_ifstmt ELSE_IF expr LLAVEIZQ block LLAVEDER {}) (ALT EPSILON))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT reserv ID D_PTS types IG expr {}) (ALT reserv ID IG expr {}))) (RULE switchstmt (returns ) (BLOCK (ALT SWITCH expr LLAVEIZQ case defaultsts LLAVEDER {}))) (RULE defaultsts (returns ) (BLOCK (ALT DEFAULT D_PTS block {}) (ALT EPSILON))) (RULE case (returns ) (BLOCK (ALT case CASE expr D_PTS block {}) (ALT EPSILON))) (RULE asignacionstmt (returns ) (BLOCK (ALT ID ig_type expr {}))) (RULE ig_type (returns ) (BLOCK (ALT IG {}) (ALT IG_IG {}) (ALT MAS_IGUAL {}) (ALT MENOS_IGUAL {}))) (RULE reserv (returns ) (BLOCK (ALT VAR {}) (ALT LET {}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR {}) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op MAS_IGUAL) (= right expr) {}) (ALT (= left expr) (= op MENOS_IGUAL) (= right expr) {}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 17:42:08:089 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacionstmt {}) (ALT switchstmt {}) (ALT whilestmt {}))) (RULE whilestmt (returns ) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER else_ifstmt elsestmt {}))) (RULE elsestmt (returns ) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER {}) (ALT EPSILON))) (RULE else_ifstmt (returns ) (BLOCK (ALT else_ifstmt ELSE_IF expr LLAVEIZQ block LLAVEDER {}) (ALT EPSILON))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT reserv ID D_PTS types IG expr {}) (ALT reserv ID IG expr {}))) (RULE switchstmt (returns ) (BLOCK (ALT SWITCH expr LLAVEIZQ case defaultsts LLAVEDER {}))) (RULE defaultsts (returns ) (BLOCK (ALT DEFAULT D_PTS block {}) (ALT EPSILON))) (RULE case (returns ) (BLOCK (ALT case CASE expr D_PTS block {}) (ALT EPSILON))) (RULE asignacionstmt (returns ) (BLOCK (ALT ID ig_type expr {}))) (RULE ig_type (returns ) (BLOCK (ALT IG {}) (ALT IG_IG {}) (ALT MAS_IGUAL {}) (ALT MENOS_IGUAL {}))) (RULE reserv (returns ) (BLOCK (ALT VAR {}) (ALT LET {}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR {}) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op MAS_IGUAL) (= right expr) {}) (ALT (= left expr) (= op MENOS_IGUAL) (= right expr) {}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 17:42:08:089 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-24 17:42:08:103 left-recursion LogManager.java:25 else_ifstmt returns []
    :   ( {}  
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ELSE_IF<tokenIndex=204> expr<tokenIndex=206> LLAVEIZQ<tokenIndex=208> block<tokenIndex=210> LLAVEDER<tokenIndex=212>   {}
        )*
    ;
2023-08-24 17:42:08:107 grammar LogManager.java:25 added: (RULE else_ifstmt (returns ) (BLOCK (ALT (BLOCK (ALT {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (ELSE_IF (ELEMENT_OPTIONS (= tokenIndex 204))) (expr (ELEMENT_OPTIONS (= tokenIndex 206))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 208))) (block (ELEMENT_OPTIONS (= tokenIndex 210))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 212))) {}))))))
2023-08-24 17:42:08:108 left-recursion LogManager.java:25 case returns []
    :   ( {}  
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CASE<tokenIndex=310>  expr<tokenIndex=312> D_PTS<tokenIndex=314> block<tokenIndex=316>   {}
        )*
    ;
2023-08-24 17:42:08:109 grammar LogManager.java:25 added: (RULE case (returns ) (BLOCK (ALT (BLOCK (ALT {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CASE (ELEMENT_OPTIONS (= tokenIndex 310))) (expr (ELEMENT_OPTIONS (= tokenIndex 312))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 314))) (block (ELEMENT_OPTIONS (= tokenIndex 316))) {}))))))
2023-08-24 17:42:08:112 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=611> expr<tokenIndex=613> PARDER<tokenIndex=615> { $e = $expr.e } 
        | list=listArray<tokenIndex=623> { $e = $list.p} 
        | CORIZQ<tokenIndex=629> listParams<tokenIndex=631> CORDER<tokenIndex=633> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=639>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=645>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=651> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=657> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MUL<tokenIndex=454>|DIV<tokenIndex=456>) right=expr<tokenIndex=461,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(ADD<tokenIndex=474>|SUB<tokenIndex=476>) right=expr<tokenIndex=481,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MAY_IG<tokenIndex=494>|MAYOR<tokenIndex=496>) right=expr<tokenIndex=501,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MEN_IG<tokenIndex=514>|MENOR<tokenIndex=516>) right=expr<tokenIndex=521,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(IG_IG<tokenIndex=534>|DIF<tokenIndex=536>) right=expr<tokenIndex=541,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=AND<tokenIndex=553> right=expr<tokenIndex=557,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=OR<tokenIndex=569> right=expr<tokenIndex=573,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=MAS_IGUAL<tokenIndex=585> right=expr<tokenIndex=589,p=10> {}
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=MENOS_IGUAL<tokenIndex=601> right=expr<tokenIndex=605,p=9> {}
        )*
    ;
2023-08-24 17:42:08:121 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 611))) (expr (ELEMENT_OPTIONS (= tokenIndex 613))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 615))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 623)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 629))) (listParams (ELEMENT_OPTIONS (= tokenIndex 631))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 633))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 639))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 645))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 651))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 657))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 454))) (DIV (ELEMENT_OPTIONS (= tokenIndex 456))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 461) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 474))) (SUB (ELEMENT_OPTIONS (= tokenIndex 476))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 481) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 494))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 496))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 501) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 514))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 516))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 521) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 534))) (DIF (ELEMENT_OPTIONS (= tokenIndex 536))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 541) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 553)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 557) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 569)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 573) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (MAS_IGUAL (ELEMENT_OPTIONS (= tokenIndex 585)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 589) (= p 10)))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (MENOS_IGUAL (ELEMENT_OPTIONS (= tokenIndex 601)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 605) (= p 9)))) {}))))))
2023-08-24 17:42:08:121 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=682> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=674> expr<tokenIndex=676> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-24 17:42:08:122 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 682))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 674))) (expr (ELEMENT_OPTIONS (= tokenIndex 676))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-24 17:42:08:123 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=711> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=701> expr<tokenIndex=703> CORDER<tokenIndex=705> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-24 17:42:08:124 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 711))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 701))) (expr (ELEMENT_OPTIONS (= tokenIndex 703))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 705))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-24 17:42:08:131 grammar LogManager.java:25 import INT=1
2023-08-24 17:42:08:131 grammar LogManager.java:25 import FLOAT=2
2023-08-24 17:42:08:131 grammar LogManager.java:25 import BOOL=3
2023-08-24 17:42:08:131 grammar LogManager.java:25 import STR=4
2023-08-24 17:42:08:131 grammar LogManager.java:25 import CHAR=5
2023-08-24 17:42:08:131 grammar LogManager.java:25 import TRU=6
2023-08-24 17:42:08:131 grammar LogManager.java:25 import FAL=7
2023-08-24 17:42:08:131 grammar LogManager.java:25 import PRINT=8
2023-08-24 17:42:08:131 grammar LogManager.java:25 import IF=9
2023-08-24 17:42:08:132 grammar LogManager.java:25 import ELSE=10
2023-08-24 17:42:08:132 grammar LogManager.java:25 import ELSE_IF=11
2023-08-24 17:42:08:132 grammar LogManager.java:25 import WHILE=12
2023-08-24 17:42:08:132 grammar LogManager.java:25 import FOR=13
2023-08-24 17:42:08:132 grammar LogManager.java:25 import IN=14
2023-08-24 17:42:08:132 grammar LogManager.java:25 import GUARD=15
2023-08-24 17:42:08:133 grammar LogManager.java:25 import CONTINUE=16
2023-08-24 17:42:08:133 grammar LogManager.java:25 import RETURN=17
2023-08-24 17:42:08:133 grammar LogManager.java:25 import SWITCH=18
2023-08-24 17:42:08:133 grammar LogManager.java:25 import BREAK=19
2023-08-24 17:42:08:133 grammar LogManager.java:25 import CASE=20
2023-08-24 17:42:08:133 grammar LogManager.java:25 import VAR=21
2023-08-24 17:42:08:133 grammar LogManager.java:25 import LET=22
2023-08-24 17:42:08:134 grammar LogManager.java:25 import D_APPEND=23
2023-08-24 17:42:08:134 grammar LogManager.java:25 import D_REMOVE=24
2023-08-24 17:42:08:134 grammar LogManager.java:25 import REPEATING=25
2023-08-24 17:42:08:134 grammar LogManager.java:25 import DEFAULT=26
2023-08-24 17:42:08:134 grammar LogManager.java:25 import COUNT=27
2023-08-24 17:42:08:134 grammar LogManager.java:25 import STRUCT=28
2023-08-24 17:42:08:134 grammar LogManager.java:25 import MUTATING=29
2023-08-24 17:42:08:134 grammar LogManager.java:25 import FUNC=30
2023-08-24 17:42:08:134 grammar LogManager.java:25 import SELF_D=31
2023-08-24 17:42:08:135 grammar LogManager.java:25 import PUNTO=32
2023-08-24 17:42:08:135 grammar LogManager.java:25 import INOUT=33
2023-08-24 17:42:08:135 grammar LogManager.java:25 import GUION_B=34
2023-08-24 17:42:08:135 grammar LogManager.java:25 import NUMBER=35
2023-08-24 17:42:08:135 grammar LogManager.java:25 import STRING=36
2023-08-24 17:42:08:135 grammar LogManager.java:25 import ID=37
2023-08-24 17:42:08:135 grammar LogManager.java:25 import DIF=38
2023-08-24 17:42:08:135 grammar LogManager.java:25 import IG_IG=39
2023-08-24 17:42:08:135 grammar LogManager.java:25 import MAS_IGUAL=40
2023-08-24 17:42:08:136 grammar LogManager.java:25 import MENOS_IGUAL=41
2023-08-24 17:42:08:136 grammar LogManager.java:25 import NOT=42
2023-08-24 17:42:08:136 grammar LogManager.java:25 import OR=43
2023-08-24 17:42:08:136 grammar LogManager.java:25 import AND=44
2023-08-24 17:42:08:136 grammar LogManager.java:25 import SOLO_AND=45
2023-08-24 17:42:08:136 grammar LogManager.java:25 import IG=46
2023-08-24 17:42:08:136 grammar LogManager.java:25 import MAY_IG=47
2023-08-24 17:42:08:136 grammar LogManager.java:25 import MEN_IG=48
2023-08-24 17:42:08:136 grammar LogManager.java:25 import MAYOR=49
2023-08-24 17:42:08:137 grammar LogManager.java:25 import MENOR=50
2023-08-24 17:42:08:137 grammar LogManager.java:25 import MUL=51
2023-08-24 17:42:08:137 grammar LogManager.java:25 import DIV=52
2023-08-24 17:42:08:137 grammar LogManager.java:25 import ADD=53
2023-08-24 17:42:08:137 grammar LogManager.java:25 import MODULO=54
2023-08-24 17:42:08:137 grammar LogManager.java:25 import SUB=55
2023-08-24 17:42:08:137 grammar LogManager.java:25 import PARIZQ=56
2023-08-24 17:42:08:137 grammar LogManager.java:25 import PARDER=57
2023-08-24 17:42:08:137 grammar LogManager.java:25 import LLAVEIZQ=58
2023-08-24 17:42:08:138 grammar LogManager.java:25 import LLAVEDER=59
2023-08-24 17:42:08:138 grammar LogManager.java:25 import D_PTS=60
2023-08-24 17:42:08:138 grammar LogManager.java:25 import CORIZQ=61
2023-08-24 17:42:08:138 grammar LogManager.java:25 import CORDER=62
2023-08-24 17:42:08:138 grammar LogManager.java:25 import COMA=63
2023-08-24 17:42:08:138 grammar LogManager.java:25 import PUNTO_COMA=64
2023-08-24 17:42:08:138 grammar LogManager.java:25 import WHITESPACE=65
2023-08-24 17:42:08:138 grammar LogManager.java:25 import COMMENT=66
2023-08-24 17:42:08:138 grammar LogManager.java:25 import LINE_COMMENT=67
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'Int'=1
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'Float'=2
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'Bool'=3
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'String'=4
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'Character'=5
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'true'=6
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'false'=7
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'print'=8
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'if'=9
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'else'=10
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'else if'=11
2023-08-24 17:42:08:139 grammar LogManager.java:25 import 'while'=12
2023-08-24 17:42:08:140 grammar LogManager.java:25 import 'for'=13
2023-08-24 17:42:08:140 grammar LogManager.java:25 import 'in'=14
2023-08-24 17:42:08:140 grammar LogManager.java:25 import 'guard'=15
2023-08-24 17:42:08:140 grammar LogManager.java:25 import 'continue'=16
2023-08-24 17:42:08:140 grammar LogManager.java:25 import 'return'=17
2023-08-24 17:42:08:140 grammar LogManager.java:25 import 'switch'=18
2023-08-24 17:42:08:140 grammar LogManager.java:25 import 'break'=19
2023-08-24 17:42:08:140 grammar LogManager.java:25 import 'case'=20
2023-08-24 17:42:08:140 grammar LogManager.java:25 import 'var'=21
2023-08-24 17:42:08:140 grammar LogManager.java:25 import 'let'=22
2023-08-24 17:42:08:141 grammar LogManager.java:25 import '.append'=23
2023-08-24 17:42:08:141 grammar LogManager.java:25 import '.remove'=24
2023-08-24 17:42:08:141 grammar LogManager.java:25 import 'repeating'=25
2023-08-24 17:42:08:141 grammar LogManager.java:25 import 'default'=26
2023-08-24 17:42:08:141 grammar LogManager.java:25 import 'count'=27
2023-08-24 17:42:08:141 grammar LogManager.java:25 import 'STRUCT'=28
2023-08-24 17:42:08:141 grammar LogManager.java:25 import 'mutating'=29
2023-08-24 17:42:08:141 grammar LogManager.java:25 import 'func'=30
2023-08-24 17:42:08:141 grammar LogManager.java:25 import 'self.'=31
2023-08-24 17:42:08:141 grammar LogManager.java:25 import '.'=32
2023-08-24 17:42:08:142 grammar LogManager.java:25 import 'inout'=33
2023-08-24 17:42:08:142 grammar LogManager.java:25 import '_'=34
2023-08-24 17:42:08:142 grammar LogManager.java:25 import '!='=38
2023-08-24 17:42:08:142 grammar LogManager.java:25 import '=='=39
2023-08-24 17:42:08:142 grammar LogManager.java:25 import '+='=40
2023-08-24 17:42:08:142 grammar LogManager.java:25 import '-='=41
2023-08-24 17:42:08:142 grammar LogManager.java:25 import '!'=42
2023-08-24 17:42:08:142 grammar LogManager.java:25 import '||'=43
2023-08-24 17:42:08:142 grammar LogManager.java:25 import '&&'=44
2023-08-24 17:42:08:142 grammar LogManager.java:25 import '&'=45
2023-08-24 17:42:08:142 grammar LogManager.java:25 import '='=46
2023-08-24 17:42:08:142 grammar LogManager.java:25 import '>='=47
2023-08-24 17:42:08:143 grammar LogManager.java:25 import '<='=48
2023-08-24 17:42:08:143 grammar LogManager.java:25 import '>'=49
2023-08-24 17:42:08:143 grammar LogManager.java:25 import '<'=50
2023-08-24 17:42:08:143 grammar LogManager.java:25 import '*'=51
2023-08-24 17:42:08:143 grammar LogManager.java:25 import '/'=52
2023-08-24 17:42:08:143 grammar LogManager.java:25 import '+'=53
2023-08-24 17:42:08:143 grammar LogManager.java:25 import '%'=54
2023-08-24 17:42:08:143 grammar LogManager.java:25 import '-'=55
2023-08-24 17:42:08:143 grammar LogManager.java:25 import '('=56
2023-08-24 17:42:08:143 grammar LogManager.java:25 import ')'=57
2023-08-24 17:42:08:143 grammar LogManager.java:25 import '{'=58
2023-08-24 17:42:08:143 grammar LogManager.java:25 import '}'=59
2023-08-24 17:42:08:143 grammar LogManager.java:25 import ':'=60
2023-08-24 17:42:08:144 grammar LogManager.java:25 import '['=61
2023-08-24 17:42:08:144 grammar LogManager.java:25 import ']'=62
2023-08-24 17:42:08:144 grammar LogManager.java:25 import ','=63
2023-08-24 17:42:08:144 grammar LogManager.java:25 import ';'=64
2023-08-24 17:42:08:144 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, TRU=6, FAL=7, PRINT=8, IF=9, ELSE=10, ELSE_IF=11, WHILE=12, FOR=13, IN=14, GUARD=15, CONTINUE=16, RETURN=17, SWITCH=18, BREAK=19, CASE=20, VAR=21, LET=22, D_APPEND=23, D_REMOVE=24, REPEATING=25, DEFAULT=26, COUNT=27, STRUCT=28, MUTATING=29, FUNC=30, SELF_D=31, PUNTO=32, INOUT=33, GUION_B=34, NUMBER=35, STRING=36, ID=37, DIF=38, IG_IG=39, MAS_IGUAL=40, MENOS_IGUAL=41, NOT=42, OR=43, AND=44, SOLO_AND=45, IG=46, MAY_IG=47, MEN_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, MODULO=54, SUB=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO_COMA=64, WHITESPACE=65, COMMENT=66, LINE_COMMENT=67, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'true'=6, 'false'=7, 'print'=8, 'if'=9, 'else'=10, 'else if'=11, 'while'=12, 'for'=13, 'in'=14, 'guard'=15, 'continue'=16, 'return'=17, 'switch'=18, 'break'=19, 'case'=20, 'var'=21, 'let'=22, '.append'=23, '.remove'=24, 'repeating'=25, 'default'=26, 'count'=27, 'STRUCT'=28, 'mutating'=29, 'func'=30, 'self.'=31, '.'=32, 'inout'=33, '_'=34, '!='=38, '=='=39, '+='=40, '-='=41, '!'=42, '||'=43, '&&'=44, '&'=45, '='=46, '>='=47, '<='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '%'=54, '-'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, ';'=64}
2023-08-24 17:42:08:144 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, TRU=6, FAL=7, PRINT=8, IF=9, ELSE=10, ELSE_IF=11, WHILE=12, FOR=13, IN=14, GUARD=15, CONTINUE=16, RETURN=17, SWITCH=18, BREAK=19, CASE=20, VAR=21, LET=22, D_APPEND=23, D_REMOVE=24, REPEATING=25, DEFAULT=26, COUNT=27, STRUCT=28, MUTATING=29, FUNC=30, SELF_D=31, PUNTO=32, INOUT=33, GUION_B=34, NUMBER=35, STRING=36, ID=37, DIF=38, IG_IG=39, MAS_IGUAL=40, MENOS_IGUAL=41, NOT=42, OR=43, AND=44, SOLO_AND=45, IG=46, MAY_IG=47, MEN_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, MODULO=54, SUB=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO_COMA=64, WHITESPACE=65, COMMENT=66, LINE_COMMENT=67}
2023-08-24 17:42:08:145 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'true'=6, 'false'=7, 'print'=8, 'if'=9, 'else'=10, 'else if'=11, 'while'=12, 'for'=13, 'in'=14, 'guard'=15, 'continue'=16, 'return'=17, 'switch'=18, 'break'=19, 'case'=20, 'var'=21, 'let'=22, '.append'=23, '.remove'=24, 'repeating'=25, 'default'=26, 'count'=27, 'STRUCT'=28, 'mutating'=29, 'func'=30, 'self.'=31, '.'=32, 'inout'=33, '_'=34, '!='=38, '=='=39, '+='=40, '-='=41, '!'=42, '||'=43, '&&'=44, '&'=45, '='=46, '>='=47, '<='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '%'=54, '-'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, ';'=64}
2023-08-24 17:42:08:161 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-24 17:42:08:161 LL1 LogManager.java:25 look=[{8..9, 12, 18, 21..22, 37}, null]
2023-08-24 17:42:08:162 LL1 LogManager.java:25 LL(1)? false
2023-08-24 17:42:08:162 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-24 17:42:08:162 LL1 LogManager.java:25 look=[8, 9, {21..22}, 37, 18, 12]
2023-08-24 17:42:08:162 LL1 LogManager.java:25 LL(1)? true
2023-08-24 17:42:08:162 LL1 LogManager.java:25 
DECISION 2 in rule elsestmt
2023-08-24 17:42:08:162 LL1 LogManager.java:25 look=[10, null]
2023-08-24 17:42:08:162 LL1 LogManager.java:25 LL(1)? false
2023-08-24 17:42:08:162 LL1 LogManager.java:25 
DECISION 3 in rule else_ifstmt
2023-08-24 17:42:08:162 LL1 LogManager.java:25 look=[null, null]
2023-08-24 17:42:08:162 LL1 LogManager.java:25 LL(1)? false
2023-08-24 17:42:08:162 LL1 LogManager.java:25 
DECISION 4 in rule declarationstmt
2023-08-24 17:42:08:162 LL1 LogManager.java:25 look=[{21..22}, {21..22}]
2023-08-24 17:42:08:163 LL1 LogManager.java:25 LL(1)? false
2023-08-24 17:42:08:163 LL1 LogManager.java:25 
DECISION 5 in rule defaultsts
2023-08-24 17:42:08:163 LL1 LogManager.java:25 look=[26, 59]
2023-08-24 17:42:08:163 LL1 LogManager.java:25 LL(1)? true
2023-08-24 17:42:08:163 LL1 LogManager.java:25 
DECISION 6 in rule case
2023-08-24 17:42:08:163 LL1 LogManager.java:25 look=[null, {26, 59}]
2023-08-24 17:42:08:163 LL1 LogManager.java:25 LL(1)? false
2023-08-24 17:42:08:163 LL1 LogManager.java:25 
DECISION 7 in rule ig_type
2023-08-24 17:42:08:163 LL1 LogManager.java:25 look=[46, 39, 40, 41]
2023-08-24 17:42:08:163 LL1 LogManager.java:25 LL(1)? true
2023-08-24 17:42:08:163 LL1 LogManager.java:25 
DECISION 8 in rule reserv
2023-08-24 17:42:08:163 LL1 LogManager.java:25 look=[21, 22]
2023-08-24 17:42:08:163 LL1 LogManager.java:25 LL(1)? true
2023-08-24 17:42:08:163 LL1 LogManager.java:25 
DECISION 9 in rule types
2023-08-24 17:42:08:163 LL1 LogManager.java:25 look=[1, 2, 4, 3, 5, 61]
2023-08-24 17:42:08:163 LL1 LogManager.java:25 LL(1)? true
2023-08-24 17:42:08:163 LL1 LogManager.java:25 
DECISION 10 in rule expr
2023-08-24 17:42:08:164 LL1 LogManager.java:25 look=[56, 37, 61, 35, 36, 6, 7]
2023-08-24 17:42:08:164 LL1 LogManager.java:25 LL(1)? true
2023-08-24 17:42:08:164 LL1 LogManager.java:25 
DECISION 11 in rule expr
2023-08-24 17:42:08:164 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null]
2023-08-24 17:42:08:164 LL1 LogManager.java:25 LL(1)? false
2023-08-24 17:42:08:164 LL1 LogManager.java:25 
DECISION 12 in rule expr
2023-08-24 17:42:08:164 LL1 LogManager.java:25 look=[null, null]
2023-08-24 17:42:08:164 LL1 LogManager.java:25 LL(1)? false
2023-08-24 17:42:08:164 LL1 LogManager.java:25 
DECISION 13 in rule listParams
2023-08-24 17:42:08:164 LL1 LogManager.java:25 look=[null, 62]
2023-08-24 17:42:08:164 LL1 LogManager.java:25 LL(1)? false
2023-08-24 17:42:08:164 LL1 LogManager.java:25 
DECISION 14 in rule listArray
2023-08-24 17:42:08:165 LL1 LogManager.java:25 look=[null, null]
2023-08-24 17:42:08:165 LL1 LogManager.java:25 LL(1)? false
2023-08-24 17:42:08:170 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 17:42:08:182 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-24 17:42:08:182 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-08-24 17:42:08:183 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-08-24 17:42:08:184 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-24 17:42:08:184 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-08-24 17:42:08:185 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-24 17:42:08:185 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-08-24 17:42:08:185 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-08-24 17:42:08:186 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-24 17:42:08:186 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-24 17:42:08:186 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-24 17:42:08:187 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-24 17:42:08:187 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-08-24 17:42:08:187 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-08-24 17:42:08:187 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-24 17:42:08:187 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-08-24 17:42:08:187 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-08-24 17:42:08:188 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:188 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:188 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:189 action-translator LogManager.java:25 translate  
2023-08-24 17:42:08:189 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-24 17:42:08:189 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,52:29]
2023-08-24 17:42:08:190 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,52:59].[@-1,38:41='line',<0>,52:65]
2023-08-24 17:42:08:190 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,52:71].[@-1,50:52='pos',<0>,52:77]
2023-08-24 17:42:08:190 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,52:82].[@-1,60:60='e',<0>,52:87]
2023-08-24 17:42:08:190 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:191 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:191 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:192 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 17:42:08:192 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:193 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 17:42:08:194 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:194 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:195 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:195 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:195 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:195 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 17:42:08:196 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:196 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 17:42:08:196 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:196 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:196 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:196 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:196 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:197 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:197 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:197 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-24 17:42:08:197 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,109:8]
2023-08-24 17:42:08:197 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-24 17:42:08:197 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,110:10]
2023-08-24 17:42:08:198 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-24 17:42:08:198 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,111:8]
2023-08-24 17:42:08:198 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-24 17:42:08:198 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,112:9]
2023-08-24 17:42:08:198 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:198 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-24 17:42:08:198 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,114:18]
2023-08-24 17:42:08:200 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:200 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-24 17:42:08:200 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-24 17:42:08:201 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-24 17:42:08:201 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-24 17:42:08:201 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-08-24 17:42:08:201 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-08-24 17:42:08:201 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-24 17:42:08:202 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:85]
2023-08-24 17:42:08:202 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,4:111].[@-1,35:38='line',<0>,4:118]
2023-08-24 17:42:08:202 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,4:125].[@-1,49:51='pos',<0>,4:132]
2023-08-24 17:42:08:202 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,4:138].[@-1,66:66='l',<0>,4:149]
2023-08-24 17:42:08:202 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-24 17:42:08:202 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-24 17:42:08:202 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-24 17:42:08:203 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-24 17:42:08:203 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-24 17:42:08:203 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-24 17:42:08:203 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-24 17:42:08:203 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-24 17:42:08:203 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-24 17:42:08:203 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-24 17:42:08:204 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-24 17:42:08:204 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-24 17:42:08:204 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-24 17:42:08:204 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-24 17:42:08:204 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-24 17:42:08:204 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-24 17:42:08:204 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:32]
2023-08-24 17:42:08:204 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,26:62].[@-1,36:39='line',<0>,26:66]
2023-08-24 17:42:08:205 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,26:73].[@-1,47:49='pos',<0>,26:77]
2023-08-24 17:42:08:205 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-24 17:42:08:205 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:32]
2023-08-24 17:42:08:205 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,27:62].[@-1,36:39='line',<0>,27:66]
2023-08-24 17:42:08:205 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,27:73].[@-1,47:49='pos',<0>,27:77]
2023-08-24 17:42:08:205 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-24 17:42:08:206 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 17:42:08:207 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:139]
2023-08-24 17:42:08:207 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:169].[@-1,37:41='start',<0>,30:174]
2023-08-24 17:42:08:207 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:192].[@-1,60:64='start',<0>,30:197]
2023-08-24 17:42:08:207 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:217].[@-1,85:85='e',<0>,30:222]
2023-08-24 17:42:08:207 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:226].[@-1,92:95='text',<0>,30:229]
2023-08-24 17:42:08:207 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:236].[@-1,105:105='e',<0>,30:242]
2023-08-24 17:42:08:207 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-24 17:42:08:207 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 17:42:08:207 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:149]
2023-08-24 17:42:08:207 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:179].[@-1,37:41='start',<0>,31:184]
2023-08-24 17:42:08:207 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:202].[@-1,60:64='start',<0>,31:207]
2023-08-24 17:42:08:208 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:227].[@-1,85:85='e',<0>,31:232]
2023-08-24 17:42:08:208 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:236].[@-1,92:95='text',<0>,31:239]
2023-08-24 17:42:08:208 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:246].[@-1,105:105='e',<0>,31:252]
2023-08-24 17:42:08:208 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-24 17:42:08:208 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 17:42:08:208 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:154]
2023-08-24 17:42:08:208 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:184].[@-1,37:41='start',<0>,32:189]
2023-08-24 17:42:08:208 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:207].[@-1,60:64='start',<0>,32:212]
2023-08-24 17:42:08:208 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:232].[@-1,85:85='e',<0>,32:237]
2023-08-24 17:42:08:208 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:241].[@-1,92:95='text',<0>,32:244]
2023-08-24 17:42:08:209 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:251].[@-1,105:105='e',<0>,32:257]
2023-08-24 17:42:08:209 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-24 17:42:08:209 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 17:42:08:209 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:154]
2023-08-24 17:42:08:209 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:184].[@-1,37:41='start',<0>,33:189]
2023-08-24 17:42:08:210 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:207].[@-1,60:64='start',<0>,33:212]
2023-08-24 17:42:08:210 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:232].[@-1,85:85='e',<0>,33:237]
2023-08-24 17:42:08:210 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:241].[@-1,92:95='text',<0>,33:244]
2023-08-24 17:42:08:210 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:251].[@-1,105:105='e',<0>,33:257]
2023-08-24 17:42:08:210 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-24 17:42:08:210 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 17:42:08:211 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:151]
2023-08-24 17:42:08:211 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:181].[@-1,37:41='start',<0>,34:186]
2023-08-24 17:42:08:211 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:204].[@-1,60:64='start',<0>,34:209]
2023-08-24 17:42:08:211 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:229].[@-1,85:85='e',<0>,34:234]
2023-08-24 17:42:08:211 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:238].[@-1,92:95='text',<0>,34:241]
2023-08-24 17:42:08:211 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:248].[@-1,105:105='e',<0>,34:254]
2023-08-24 17:42:08:211 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-24 17:42:08:211 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 17:42:08:211 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:127]
2023-08-24 17:42:08:211 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:157].[@-1,37:41='start',<0>,35:162]
2023-08-24 17:42:08:211 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:180].[@-1,60:64='start',<0>,35:185]
2023-08-24 17:42:08:212 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:205].[@-1,85:85='e',<0>,35:210]
2023-08-24 17:42:08:212 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:214].[@-1,92:95='text',<0>,35:217]
2023-08-24 17:42:08:212 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:224].[@-1,105:105='e',<0>,35:230]
2023-08-24 17:42:08:212 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-24 17:42:08:212 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 17:42:08:212 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:126]
2023-08-24 17:42:08:212 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:156].[@-1,37:41='start',<0>,36:161]
2023-08-24 17:42:08:212 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:179].[@-1,60:64='start',<0>,36:184]
2023-08-24 17:42:08:212 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:204].[@-1,85:85='e',<0>,36:209]
2023-08-24 17:42:08:212 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:213].[@-1,92:95='text',<0>,36:216]
2023-08-24 17:42:08:212 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:223].[@-1,105:105='e',<0>,36:229]
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-24 17:42:08:213 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-24 17:42:08:214 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:214 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-24 17:42:08:214 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-24 17:42:08:214 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-24 17:42:08:214 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-24 17:42:08:214 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-24 17:42:08:214 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 17:42:08:214 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-24 17:42:08:214 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-24 17:42:08:215 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-24 17:42:08:215 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-24 17:42:08:215 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 17:42:08:215 action-translator LogManager.java:25 translate 
2023-08-24 17:42:08:215 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-24 17:42:08:215 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-24 17:42:08:215 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-24 17:42:08:215 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-24 17:42:08:215 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-24 17:42:08:216 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 17:42:08:216 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-24 17:42:08:216 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-08-24 17:42:08:216 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-08-24 17:42:08:216 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-08-24 17:42:08:217 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-08-24 17:42:08:217 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-08-24 17:42:08:217 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 17:42:08:331 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 17:42:08:331 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 17:42:08:368 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 17:42:08:368 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 17:42:08:415 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 17:42:08:415 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 17:42:08:462 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 17:42:08:462 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

